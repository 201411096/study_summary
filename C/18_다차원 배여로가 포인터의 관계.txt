--------------------------------------------------------------------------------
2차원 배열이름의 포인터 형

int arr[10];	// arr은 int형 포인터
void SimpleFunc(int * ptr) { . . . }	//  1차원 배열을 받을 수 있는 함수

int * arr[10];	// 포인터 배열(포인터들이 담겨져 있는 배열)
void SimpleFunc2(int ** ptr) { . . . }	// 포인터 배열을 받을 수 있는 함수

2차원 배열 이름이 가리키는 것들
int arr2d[3][3];
printf("%d \n", arr2d);				// arr2d의 주소값 출력 
printf("%d \n", arr2d[0]);			// arr2d의 주소값과 같은 주소 출력 
printf("%d \n\n", &arr2d[0][0]);	// arr2d의 주소값과 같은 주소 출력 
	
printf("%d \n", arr2d[1]);			// arr2d[1]의 주소값 출력 
printf("%d \n\n", &arr2d[1][0]);	// arr2d[1]의 주소값과 같은 주소 출력 
	
// arr2d와 arr2d[0]은 둘 다 arr2d[3][3]의 첫번쨰 요소를 가리키지만, arr2d는 첫번쨰 요소를 가리키되 배열 전체를 의미하고, arr2d[0]은 첫번째 요소를 가리키되 1행만을 의미한다. 
printf("sizeof(arr2d) : %d", sizeof(arr2d));		// 36(4 * 3 * 3)
printf("sizeof(arr2d[0]) : %d\n", sizeof(arr2d[0])); // 12(4 * 3 * 1)
printf("sizeof(arr2d[1]) : %d\n", sizeof(arr2d[1])); // 12(4 * 3 * 1)

배열이름 기반의 포인터 연산
1차원 배열이름 기반의 포인터 연산
int iarr[3];
double darr[7];
printf("%p %p\n", iarr, iarr+1);	// 000000000062FE10 000000000062FE14 ( iarr의 주소값, iarr의 주소값+4(sizeof(int)) ) 
printf("%p %p\n", darr, darr+1); 	// 000000000062FDD0 000000000062FDD8 ( darr의 주소값, darr의 주소값+8(sizeof(double)) )
2차원 배열이름 기반의 포인터 연산
int arr1[3][2];
int arr2[2][3];
printf("arr1 : %p\n", arr1);		// 000000000062FE00 : arr1 2차원 배열의 주소값 
printf("arr1+1 : %p\n", arr1+1);	// 000000000062FE08 : arr1 2차원 배열의 주소값 + sizeof(int) * 2(가로길이) * 1 
printf("arr1+2 : %p\n\n", arr1+2);	// 000000000062FE10 : arr1 2차원 배열의 주소값 + sizeof(int) * 2(가로길이) * 2
printf("arr2 : %p\n", arr2);		// 000000000062FDE0 : arr2 2차원 배열의 주소값
printf("arr2+1 : %p\n", arr2+1);	// 000000000062FDEC : arr2 2차원 배열의 주소값 + sizeof(int) * 3(가로길이) * 1 
printf("arr2+2 : %p\n\n", arr2+2);	// 000000000062FDF8 : arr2 2차원 배열의 주소값 + sizeof(int) * 3(가로길이) * 2 

2차원 배열이름의 포인터 형
int arr[3][4]의 포인터 형 -> arr은 가리키는 대상이 int형 변수이며, 포인터 연산 시 sizeof(int)*4의 크기단위로 값이 증가 및 감소하는 포인터 형
int arr[3][4]를 가리키는 포인터 변수의 선언 -> int (*ptr) [4]; // int형 변수를 가리키는 포인터이며 포인터 연산 시 4칸씩 건너뛰는 포인터
char (*arr)[4];	->	char형 변수를 가리키면서 포인터 연산 시 sizeof(char)*4의 크기단위로 값이 증가 및 감소하는 포인터 변수
double (*arr)[7];	->	double형 변수를 가리키면서 포인터 연산 시 sizeof(double)*7의 크기단위로 값이 증가 및 감소하는 포인터 변수

2차원 배열의 포인터 형을 결정짓는 연습
int arr1[2][2] = {
	{1, 2}, {3, 4}
};
int arr2[3][2] = {
	{1, 2}, {3, 4}, {5, 6}
};
int arr3[4][2] = {
	{1, 2}, {3, 4}, {5, 6}, {7, 8}
};

int (*ptr)[2]; 

ptr = arr1;	//ptr이 arr1과 동일하게 작동함
for(int i=0; i<2; i++)
	printf("%d %d\n", ptr[i][0], ptr[i][1]);
	
ptr = arr2;	//ptr이 arr2과 동일하게 작동함
for(int i=0; i<3; i++)
	printf("%d %d\n", ptr[i][0], ptr[i][1]);

ptr = arr3;	//ptr이 arr3과 동일하게 작동함
for(int i=0; i<4; i++)
	printf("%d %d\n", ptr[i][0], ptr[i][1]);
--------------------------------------------------------------------------------
2차원 배열이름의 특성과 주의사항

배열 포인터 <-> 포인터 배열
int * whoA [4];	// 포인터 배열
int (*whoB) [4];	// 배열 포인터
--------------------------------------------------------------------------------