------------------------------------------------------------
기본 자료형의 종류와 데이터의 표현범위

정수형
char	1바이트	-128이상 +127이하
short	2바이트	-32768이상 +32767이하
int	4바이트	-2147483648이상 +2147283647이하
long	4바이트	-2147483648이상 +2147283647이하
long long8바이트	-9223372036854775808이상
		+9223372036854775807이하
실수형
float		4바이트		+-1.7*10^-37이상 +-1.7*10^38이하
double		8바이트		+-1.7*10^-307이상 +-1.7*10^308이하
long double	8바이트 이상	double 이상의 표현범위

자료형별 크기는 컴파일러마다 차이가 있을 수 있다.

연산자 sizeof를 이용하면 자료형의 크기를 확인할 수 있다.
int num = 10;
int sz1 = sizeof(num);
int sz2 = sizeof(int);

일반적인 자료형의 선택 : int, double (연산속도 기준)

unsigned를 붙여서 0과 양의 정수만 표현하게 할 수 있습니다.(MSB도 데이터의 크기를 표현하는데 사용이 된다.)
------------------------------------------------------------
문자의 표현방식과 문자를 위한 자료형

숫자를 이용해서 문자를 표현하도록 하기 위해 숫자를 문자에 연결(mapping)시킴

65 -> A, 66 -> B ..

char ch1 = 'A', ch2 = 66;
int ch3 = 'C', ch4 = 68;
printf("%c %c %c %c", ch1, ch2, ch3, ch4); // A B C D

문자를 int형 변수로 선언하지 않는 이유는 따로 연산을 할 필요가 없기 때문이다.(char형 변수가 적합)
++ char형은 문자의 표현을 목적으로 정의된 자료형이기 때문에 '문자형'으로 분류되기도 하지만 정수형이기도 하다.

이름을 지니지 않는 리터럴(literal) 상수
메모리에는 존재하지만 이름이 없는 값들
int main(void)
{
	int num1 = 3+4;
	int num2 = 7 + num1;
	double num3 = 2.12 + 7.49;
}
변수의 수 : 3개( num1, num2, num3)
상수의 수 : 5개(3, 4, 7, 2.12, 7.49)

리터럴 상수의 자료형
자료형은 변수만을 위해서 존재하는 것이 아니며 상수를 위해서도 존재한다.
int로 표현 가능한 정수형 상수는 int형으로, double형으로 표현 가능한 실수형 상수는 double형에 저장이된다.

char ch = 'A'; // 리터럴 상수 'A'는 char형으로 표현이 될 것 같지만 int형으로 저장이 된다.

접미사를 이용한 다양한 상수의 표현 (대소문자를 구분하지 않음)

float num1 = 5.789; // double형으로 표현 가능한 실수형 상수는 double형에 저장이 되므로 경고 메시지 발생
float num2 = 3.24+5.12; // 경고 메시지 발생(초기화 시, double형 데이터를 float형 변수에 저장하므로..)
float num3 = 5.789f // 경고 메시지 발생 안함

U	unsigned int
L	long
UL	unsigned long
LL	long long
ULL	unsigned long long

F	float
L	long double

눈에 잘 띄도록 상황에 맞게? 대소문자 선택

이름을 지니는 심볼릭(symbolic) 상수 : const 상수

const int MAX = 100;	// 값의 변경 불가
const double PI = 3.1415; 	// 값의 변경 불가

const int MAX; // 쓰레기 값으로 초기화가 됨
MAX = 100; // 값의 변경 불가 (컴파일 에러 발생)

->선언과 초기화를 분리 할 수 없음, 일반적으로 상수의 이름은 모두 대문자로 표시하고, 둘 이상의 단어로 연결할 떄에는 언더바를 이용해서 두 단어를 구분하는 것이 관례

------------------------------------------------------------
자료형의 변환

자동 형 변환(묵시적 형 변환)
- 대입연산의 전달과정에서 발생하는 자동 형 변환 (데이터의 표현범위가 좁은 자료형으로의 형 변환은 데이터 손실이 발생할 수 있음)
- 정수의 승격에 의한 자동형 변환
일반적으로 CPU가 처리하기에 적합한 크기의 정수 자료형인 int로 변환되서 계산됨(short형 변수 두개를 계산하는 경우에도 둘 다 int로 변환해서 계산)
- 피연산자의 자료형 불일치로 발생하는 자동 형 변환(데이터의 손실을 최소화하는 바얗ㅇ으로 진행)
int -> long -> long long -> float -> double -> long double

명시적 형변환(강제로 일으키는 형변환)
형 변환 연산자(type casting operator)를 이용한 변환