------------------------------------------------------------
포인터 변수는 주소 값의 저장을 목적으로 선언되는 변수이다.

int * pnum;
// pnum : 포인터 변수의 이름
// int * : int형 변수의 주소 값을 저장하는 포인터 변수의 선언
pnum = &num;
// 변수 num의 시작번지 주소값을 저장

포인터 변수의 크기는 4바이트가 될 수도 있고 8바이트가 될 수도 있다.(32비트 시스템인지, 64비트 시스템인지)
------------------------------------------------------------
& 연산자와 * 연산자

변수의 주소 값을 반환하는 & 연산자
&연산자는 피연산자의 주소값을 반환하는 연산자이며 상수는 피연산자가 될 수 없음
자료형에 맞지 않는 포인터 변수의 선언은 문제가 될 수 있음(컴파일은 되지만 *연산시 문제가 발생할 수 있음)

포인터가 가리키는 메모리를 참조하는 * 연산자
*연산자는 포인터가 가리키는 메모리 공간에 접근할 때 사용하는 연산자

포인터 형이 존재하는 이유
포인터의 형은 메모리 공간을 참조하는 기준이 된다.
return *pnum; // pnum에 저장된 주소를 시작으로 몇 바이트를 읽어야하는지 모름 -> int형 포인터 변수라고 가정한다면 pnum의 주소를 기준으로 4바이트를 읽어들여서 정수로 해석할 수 있음

잘못된 포인터의 사용과 널 포인터
int * ptr; // 포인터 변수 ptr이 쓰레기 값으로 초기화됨 -> 어느 주소를 가리키는지 모름
*ptr - 200; // 

포인터 변수의 초기화 방법 // NULL 포인터
int * ptr = 0;	// NULL포인터를 사용할 경우 *연산을 사용할 시 메모리 공간에 어떠한 영향도 미치지 않음
int * ptr2 = NULL; // NULL은 사실상 0을 의미함

