--------------------------------------------------------------------------------
구조체의 정의와 typedef 선언

typedef 선언
typedef 선언은 기존에 존재하는 자료형의 이름에 새 이름을 부여하는 것을 목적으로 하는 선언이다.
typedef 선언에 있어서 새로운 이름의 부여는 가장 마지막에 등장하는 단어를 중심으로 이뤄진다.
typedef name1 name2 name3;	// name3이 'name1 name2'에 부여된 새로운 이름

typedef int INT;
typedef int * PTR_INT;
typedef unsigned int UINT;
typedef unsigned int * PTR_UINT;
int main(void)
{
	INT num1 = 120; 		// int num1 = 120;
	PTR_INT pnum1 = &num1	// int * pnum1 = &num1;
	
	UINT num2 = 190;		// unsigned int num2 = 190;
	PTR_UINT pnum2 = &num2; // unsigned int * pnum2 = &num2;
	
	printf("%d %u\n", *pnum1, *pnum2);

	return 0;
}

구조체의 정의와 typedef 선언
typedef 선언을 통해 struct 선언을 생략하는 것이 일반적이다.

struct point
{
	int xpos;
	int ypos;
};
typedef struct point Point;
typedef struct person
{
	char name[20];
	char phoneNum[20];
	int age;
}Person;
int main(void)
{
	Point pos = {10, 20};
	Person man = {"abc", "010-1234-3456", 20};
	printf("%d %d\n", pos.xpos, pos.ypos);
	printf("%s %s %d\n", man.name, man.phoneNum, man.age);	
	return 0;
}

구조체 이름의 생략
typedef struct person
{
	char name[20];
	char phoneNum[20];
	int age;
}Person;
이렇게 정의가 되면, 구조체의 이름 person은 사실상 별 의미를 갖지 않게 된다.(typedef에 의해 정의된 이름 Person을 사용하기 때문이다.)
따라서 아래와 같이 구조체의 이름을 생략하는 것이 가능하다.
typedef struct
{
	char name[20];
	char phoneNum[20];
	int age;
}Person;
--------------------------------------------------------------------------------
함수로의 구조체 변수 전달과 반환

함수의 인자로 전달되고 return문에 의해 반환되는 구조체 변수
함수의 인자로 구조체 변수가 전달될 수 있으며, 이러한 인자를 전달받을 수 있도록 구조체 변수가 매개변수의 선언으로 올 수 있다.
이렇게 전달되는 구조체 변수의 값은 매개변수에 통쨰로 복사가 되며, 구조체의 멤버로 배열이 선언되어도 동일한 형태의 복사가 진행된다.
이렇게 매개변수로 값이 전달될 경우 구조체 멤버는 모두 복사된 값으로 멤버를 아무리 변경해봐야 함수 바깥에 있는 구조체 변수에는 영향을 미치지 않습니다.

typedef struct point
{
	int xpos;
	int ypos;
}Point;

void SwapPoint(Point *pos1, Point *pos2)
{
	Point temp = *pos1;
	*pos1 = *pos2;
	*pos2 = temp;
}
int main(void)
{
	Point pos1 = {2,4};
	Point pos2 = {5,7};
	
	SwapPoint(&pos1, &pos2);
	printf("[%d, %d]\n", pos1.xpos, pos1.ypos);
	printf("[%d, %d]\n", pos2.xpos, pos2.ypos);
	return 0;
}

구조체 변수를 대상으로 가능한 연산
기본 자료형 변수와 달리 구조체 변수를 대상으로는 매우 제한된 연산만 허용이 된다.
허용되는 가장 대표적인 연산은 대입연산이며, 그 이외로 주소 값 반환을 목적으로 하는 & 연산이나 구조체 변수의 크기를 반환하는 sizeof 정도의 연산만 허용이 된다.
--------------------------------------------------------------------------------
구조체의 유용함에 대한 논의와 중첩 구조체

구조체를 정의하는 이유
구조체를 통해서 연관 있는 데이터를 하나로 묶을 수 있는 자료형을 정의하면, 데이터의 표현 및 관리과 용이해지기 떄문이다.
typedef struct student{
	char name[20];
	char stdnum[20];
	char school[29];
	char major[20];
	int yyear;
}Student;
void ShowStudentInfo(Student *sptr)
{
	printf("학생 이름 : %s \n", sptr->name);
	printf("학생 고유번호 : %s \n", sptr->stdnum);
	printf("학교 이름 : %s\n", sptr->school);
	printf("선택 전공 : %s\n", sptr->major);
	printf("학년 : %d\n", sptr->year);	
}
int main(void)
{
	Student arr[7];
	
	for(int i=0; i<7; i++)	// for문 안에 변수 선언은 c99이후..
	{
		printf("이름: "); scanf("%s", arr[i].name);
		printf("번호: "); scanf("%s", arr[i].stdnum);
		printf("학교: "); scanf("%s", arr[i].school);
		printf("전공: "); scanf("%s", arr[i].major);
		printf("학년: "); scanf("%d", &arr[i].year);
	} 
	for(int i=0; i<7; i++)
		ShowStudentInfo(&arr[i]);	
	return 0;
}

중첩된 구조체의 정의와 변수의 선언
typedef struct point
{
	int xpos;
	int ypos;
}Point;
typedef struct circle
{
	Point cen;
	double rad;
}Circle;
void ShowCircleInfo(Circle * cptr)
{
	printf("[%d, %d]\n", (cptr->cen).xpos, (cptr->cen).ypos);
	printf("radius: %g\n\n", cptr->rad);
}
int main(void)
{
	Circle c1 = { {1,2}, 3.5 };	// 구조체 변수가 멤버로 존재할 경우, 중괄호를 이용해서 구조체 멤버의 초기화를 구분 
	Circle c2 = {2, 4, 3.9};	// 중괄호를 이용하여 구분하지 않을 경우 순서대로 초기화 된다.(구조체 멤버 안에서 순서대로..) 
	ShowCircleInfo(&c1);
	ShowCircleInfo(&c2);	
	return 0;
}
+ 구조체 변수를 초기화하는 경우에도 배열의 초기화와 마찬가지로 초기화하지 않은 일부 멤버에 대해서는 0으로 초기화가 진행된다.
--------------------------------------------------------------------------------
공용체(Union Type)의 정의와 의미
구조체는 struct라는 키워드를 사용해서 정의하는 반면, 공용체는 union이라는 키워드를 사용해서 정의한다.
그리고 union이라는 단어의 의미에 공용체의 특성이 고스란히 담겨있다.

구조체 vs 공용체
정의방식에서의 유일한 차이점은 struct 선언을 하느냐, union 선언을 하느냐에 있다.
하지만 각각의 변수가 메모리 공간에 할당되는 방식과 접근의 결과에는 많은 차이가 있다.
--------------------------------------------------------------------------------
열거형(Enumerated Type)의 정의와 의미
--------------------------------------------------------------------------------