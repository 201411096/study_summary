--------------------------------------------------------------------------------
스트림과 데이터의 이동

데이터의 이동수단이 되는 스트림
데이터를 입출력 하기 위해서는 이들을 연결시켜 주는 매개체가 필요하며, 이러한 매개체를 가리켜 '스트림(stream)'이라고 한다.

스트림의 생성과 소멸
콘솔(일반적으로 키보드와 모니터)와의 입출력은 다른 입출력들과의 큰 차이가 있다.
이는 스트림의 생성을 요구할 필요가 없이, 자동으로 생성된다는 것이다.
stdin	표준 입력 스트림	키보드 대상으로 입력
stdout	표준 출력 스트림	모니터 대상으로 출력
stderr	표준 출력 스트림	모니터 대상으로 출력 -> 표준 출력 스트림과 큰 차이가 없지만, 입출력 리다이렉션(redirection)을 익히고 나면 용도를 구분할 수 있게 된다.
--------------------------------------------------------------------------------
문자 단위 입출력 함수

문자 출력 함수 : putchar, fputc
#include <stdio.h>
int putchar(int c);
int fputc(int c, FILE * stream);
// 함수호출 성공 시 쓰여진 문자정보가, 실패시 EOF 반환

문자 입력 함수 : getchar, fgetc
#include <stdio.h>
int getchar(void);
int fgetc(FILE * stream);
// 파일의 끝에 도달하거나 함수호출 실패 시 EOF 반환

int main(void)
{
	int ch1, ch2;
	
	ch1 = getchar();
	ch2 = fgetc(stdin);
	
	putchar(ch1);
	putchar(ch2);
	// 입력 p
	// 출력 p
	// 입력을 두개를 받았지만 하나만 출력된 것처럼 보이는 것은 "\n"키도 문자로 취급받아 같이 출력되었기 떄문 
	return 0;
}

문자 입출력에서의 EOF
EOF는 End Of File의 약자로서, 파일의 끝을 표현하기 위해서 정의해 높은 상수이다.
입출력 함수들이 EOF를 반환하는 경우는 함수호출의 실패이거나, Windows에서의 CTRL+Z, Linux에성의 CTRL+D키가 입력되는 경우이다.
int main(void)
{
	int ch;	
	while(1)
	{
		ch = getchar();
		if(ch==EOF)		// Windows에서의 CTRL+Z, Linux에성의 CTRL+D키가 입력되는 경우 탈출 
			break;
		putchar(ch);
	}
	return 0;
}

반환형이 int이고, int형 변수에 문자를 담는 이유
반환되는 것은 1바이트 크기의 문자인데, 반환형이 int이다.
이러한 이유로는 char형의 경우 char를 unsigned char로 처리하는 컴파일러도 존재하는 등의 예외가 존재할 수 있다.
하지만 위의 두 함수가 반환하는 값 중 하나인 EOF는 -1로 정의된 상수이며, 반환형이 char형이라면 char를 unsigned char로 처리하는 컴파일러를 만났을 경우,
문제가 생길 수도 있다.

+문자 단위 입출력 함수의 존재이유
printf와 scanf 함수는 본래 서식지정을 통해서 새로운 입출력의 형태를 구성하는 함수로서, 
화려한 기능을 제공하는 만큼 사용하는 메모리 공간이 크고, 해야할 연산의 양도 많아서 상대적으로 속도가 느리다.

getchar, putchar 함수의 활용
int convertCase(int arg)
{
	// 아스키코드 A~Z : 65~90, a-z : 97~122 
	if( (!(arg>='A' && arg<='Z')) && (!(arg>='a' && arg<='z')) && (!arg == '\n')) // 알파벳 이외의 문자이면서 개행문자가 아닐 경우 -1 반환 
		return -1;
	else if ((arg>='A' && arg<='Z')) 
		return arg + ('a'-'A');
	else if ((arg>='a' && arg<='z'))
		return arg - ('a'-'A');
} 

int main(void)
{
	int ch;	
	while(1)
	{
		ch = getchar();
		ch = convertCase(ch);
		if(ch == -1)
		{
			puts("알파벳 이외의 문자를 입력했습니다.");
			break;
		}	
		putchar(ch);
	}
	return 0;
}
--------------------------------------------------------------------------------
문자열 단위 입출력 함수

문자열 출력 함수: puts, fputs
#include <stdio.h>
int puts(const char * s);
int puts(const char * s, FILE * stream);
// 성공 시 음수가 아닌 값을, 실패 시 EOF 반환

char * str1 = "Simple String1";
char str2 [] = "Simple String2";
puts(str1);	// puts()는 별도의 개행 작업을 거친다. 
fputs(str2, stdout); puts("");
puts("\n"); 	// puts()는 \n이 추가되기 떄문에 이 문장은 두번의 개행을 하게 된다. 

문자열 입력 함수: gets, fgets
#include <stdio.h>
char * gets(char *s);			// 할당 받지 않은 메모리 공간을 침범하는 오류가 발생하는 경우가 많음, fgets 함수를 호출하는 것이 권장됨
char * gets(char *s, int n, FILE * stream);
// 파일의 끝에 도달하거나 함수호출 실패 시 NULL 포인터 반환

char str[7];
for(int i=0; i<3; i++)
{
//	gets(str);			//gets() 함수는 \n을 만날때까지 문자를 읽어들이며 \n을 만나면 제외시킨 후에 저장함 
	fgets(str, sizeof(str), stdin);	//fgets() 함수는 \n을 만날떄까지 문자를 읽어들이며 \n을 제외시키지않고 문자열의 일부로 받아들임, 문자열의 끝은 NULL로 채움
	printf("Read %d: %s \n", i+1, str);
}
--------------------------------------------------------------------------------
표준 입출력과 버퍼
--------------------------------------------------------------------------------
입출력 이외의 문자열 관련 함수
--------------------------------------------------------------------------------