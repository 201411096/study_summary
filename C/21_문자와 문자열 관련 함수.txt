--------------------------------------------------------------------------------
스트림과 데이터의 이동

데이터의 이동수단이 되는 스트림
데이터를 입출력 하기 위해서는 이들을 연결시켜 주는 매개체가 필요하며, 이러한 매개체를 가리켜 '스트림(stream)'이라고 한다.

스트림의 생성과 소멸
콘솔(일반적으로 키보드와 모니터)와의 입출력은 다른 입출력들과의 큰 차이가 있다.
이는 스트림의 생성을 요구할 필요가 없이, 자동으로 생성된다는 것이다.
stdin	표준 입력 스트림	키보드 대상으로 입력
stdout	표준 출력 스트림	모니터 대상으로 출력
stderr	표준 출력 스트림	모니터 대상으로 출력 -> 표준 출력 스트림과 큰 차이가 없지만, 입출력 리다이렉션(redirection)을 익히고 나면 용도를 구분할 수 있게 된다.
--------------------------------------------------------------------------------
문자 단위 입출력 함수

문자 출력 함수 : putchar, fputc
#include <stdio.h>
int putchar(int c);
int fputc(int c, FILE * stream);
// 함수호출 성공 시 쓰여진 문자정보가, 실패시 EOF 반환

문자 입력 함수 : getchar, fgetc
#include <stdio.h>
int getchar(void);
int fgetc(FILE * stream);
// 파일의 끝에 도달하거나 함수호출 실패 시 EOF 반환

int main(void)
{
	int ch1, ch2;
	
	ch1 = getchar();
	ch2 = fgetc(stdin);
	
	putchar(ch1);
	putchar(ch2);
	// 입력 p
	// 출력 p
	// 입력을 두개를 받았지만 하나만 출력된 것처럼 보이는 것은 "\n"키도 문자로 취급받아 같이 출력되었기 떄문 
	return 0;
}

문자 입출력에서의 EOF
EOF는 End Of File의 약자로서, 파일의 끝을 표현하기 위해서 정의해 높은 상수이다.
입출력 함수들이 EOF를 반환하는 경우는 함수호출의 실패이거나, Windows에서의 CTRL+Z, Linux에성의 CTRL+D키가 입력되는 경우이다.
int main(void)
{
	int ch;	
	while(1)
	{
		ch = getchar();
		if(ch==EOF)		// Windows에서의 CTRL+Z, Linux에성의 CTRL+D키가 입력되는 경우 탈출 
			break;
		putchar(ch);
	}
	return 0;
}

반환형이 int이고, int형 변수에 문자를 담는 이유
반환되는 것은 1바이트 크기의 문자인데, 반환형이 int이다.
이러한 이유로는 char형의 경우 char를 unsigned char로 처리하는 컴파일러도 존재하는 등의 예외가 존재할 수 있다.
하지만 위의 두 함수가 반환하는 값 중 하나인 EOF는 -1로 정의된 상수이며, 반환형이 char형이라면 char를 unsigned char로 처리하는 컴파일러를 만났을 경우,
문제가 생길 수도 있다.

+문자 단위 입출력 함수의 존재이유
printf와 scanf 함수는 본래 서식지정을 통해서 새로운 입출력의 형태를 구성하는 함수로서, 
화려한 기능을 제공하는 만큼 사용하는 메모리 공간이 크고, 해야할 연산의 양도 많아서 상대적으로 속도가 느리다.

getchar, putchar 함수의 활용
int convertCase(int arg)
{
	// 아스키코드 A~Z : 65~90, a-z : 97~122 
	if( (!(arg>='A' && arg<='Z')) && (!(arg>='a' && arg<='z')) && (!arg == '\n')) // 알파벳 이외의 문자이면서 개행문자가 아닐 경우 -1 반환 
		return -1;
	else if ((arg>='A' && arg<='Z')) 
		return arg + ('a'-'A');
	else if ((arg>='a' && arg<='z'))
		return arg - ('a'-'A');
} 

int main(void)
{
	int ch;	
	while(1)
	{
		ch = getchar();
		ch = convertCase(ch);
		if(ch == -1)
		{
			puts("알파벳 이외의 문자를 입력했습니다.");
			break;
		}	
		putchar(ch);
	}
	return 0;
}
--------------------------------------------------------------------------------
문자열 단위 입출력 함수

문자열 출력 함수: puts, fputs
#include <stdio.h>
int puts(const char * s);
int puts(const char * s, FILE * stream);
// 성공 시 음수가 아닌 값을, 실패 시 EOF 반환

char * str1 = "Simple String1";
char str2 [] = "Simple String2";
puts(str1);	// puts()는 함수내에서 별도의 개행 작업을 거친다. (입력받은 문자열을 다 출력한 후에 개행을 추가로 함)
fputs(str2, stdout); puts("");
puts("\n"); 	// puts()는 \n이 추가되기 떄문에 이 문장은 두번의 개행을 하게 된다. 

문자열 입력 함수: gets, fgets
#include <stdio.h>
char * gets(char *s);			// 할당 받지 않은 메모리 공간을 침범하는 오류가 발생하는 경우가 많음, fgets 함수를 호출하는 것이 권장됨
char * gets(char *s, int n, FILE * stream);
// 파일의 끝에 도달하거나 함수호출 실패 시 NULL 포인터 반환

char str[7];
for(int i=0; i<3; i++)
{
//	gets(str);			//gets() 함수는 \n을 만날때까지 문자를 읽어들이며 \n을 만나면 제외시킨 후에 저장함 
	fgets(str, sizeof(str), stdin);	//fgets() 함수는 \n을 만날떄까지 문자를 읽어들이며 \n을 제외시키지않고 문자열의 일부로 받아들임, 문자열의 끝은 NULL로 채움
	printf("Read %d: %s \n", i+1, str);
}
--------------------------------------------------------------------------------
표준 입출력과 버퍼

표준 입출력 기반의 버퍼
printf, scanf, fputc, fgetc 모두 ANSI C의 표준에서 정의된 표준 입출력 함수이다.
이러한 표준 입출력 함수를 통해서 데이터를 입출력 하는 경우, 해당 데이터들을 운영체제가 제공하는 '메모리 버퍼'를 중간에 통과하게 된다.
이렇게 입력된 데이터가 입력 스트림을 거쳐서 입력버퍼로 들어가는 시점은 엔터 키가 눌리는 시점이다.

버퍼링(Buffering)을 하는 이유
데이터를 목적지로 바로 전송하지 않고 중간에 출력버퍼와 입력버퍼를 둬서 전송하고자 하는 데이터를 임시 저장하는 이유는 '데이터 전송의 효율성'과 관련이 있다.

출력버퍼를 비우는 fflush 함수
출력버퍼가 비워진다는 것은 출력버퍼에 저장된 데이터가 버퍼를 떠나서 목적지로 이동됨을 뜻한다.
출력버퍼가 비워지는 시점은 시스템과 버퍼의 성격에 따라 달라진다. (버퍼가 꽉 찼을 떄 비워지는 버퍼, 하나의 문장이 완전히 입력되었을 때마다 비워지는 버퍼)
이렇듯 버퍼가 비워지는 시점이 동일하지 않기 때문에 버퍼를 비우는 함수를 알아 둘 필요가 있다.
만약 콘솔 입출력을 하는 상황이면서, 범용 OS(windows, linux)를 사용하는 경우라면 stdout을 대상으로 호출할 일은 많지 않다.
#include <stdio.h>
int fflush(FILE * stream);
// 함수호출 성공 시 0, 실패 시 EOF 반환

입력버퍼를 비우는 방법
'출력버퍼의 비워짐'이 저장된 데이터가 목적지로 전송됨을 의미한다면, '입력버퍼의 비워짐'은 데이터의 소멸을 의미한다.
fflush 함수는 출력버퍼를 대상으로 호출하는 함수이며, 입력버퍼를 비우기 위해서는 다른 방법이 필요하다.
void ClearLineFromReadBuffer(void)
{
	while(getchar()!='\n');	// '\n'을 만날 때까지 읽어들이며, 비우는 것이 목적이기 떄문에 읽어들인 값을 저장하지 않는다.
}
int main(void)
{
	char perID[7];
	char name[10];
	
	fputs("주민번호 앞 6자리 입력: ", stdout);
	fgets(perID, sizeof(perID), stdin);		//951230 입력 시, 널문자를 제외한 최대 6문자를 읽어들이게 됨 -> '\n'이 입력버퍼에 남게 됨 -> 다음 fgets에서 '\n' 하나만을 받고 끝나게 됨
//	ClearLineFromReadBuffer();			//입력 버퍼를 비우지 않을 경우 위에 주석에 해당하는 문제가 발생할 수 있음

	fputs("이름 입력 : ", stdout);
	fgets(name, sizeof(name), stdin);
	
	printf("주민번호 : %s\n", perID);
	printf("이름 : %s\n", name);	
	return 0;
}
--------------------------------------------------------------------------------
입출력 이외의 문자열 관련 함수

반환형 size_t의 일반적인 선언
typedef unsigned int size_t;	// unsigned int의 선언을 size_t로 대신할 수 있음

문자열의 길이를 반환하는 함수: strlen
#include <string.h>
size_t strlen(const char * s);
// 전달된 문자열의 길이를 반환하되, 널 문자는 길이에 포함되지 않는다.

char str [] = "1234567";
printf("str length ... %d\n", strlen(str)); // 7
str[6]=0;
printf("str length ... %d\n", strlen(str)); // 6
str[3]='\0';
printf("str length ... %d\n", strlen(str)); // 3 (널 문자를 제외한 문자열의 길이를 반환함 

문자열을 복사하는 함수들: strcpy, strncpy
#include <string.h>
char * strcpy(char * dest, const char * src);
char * strncpy(char * dest, const char * src, size_t n);
// 복사된 문자열의 주소 값 반환

char str1[20] = "1234567890";
char str2[20];
char str3[5];

strcpy(str2, str1);	// src(str1)을 dst(src2)에 복사 
puts(str2);	//1234567890

strncpy(str3, str1, sizeof(str3));	// src(str1)을 dst(src3)에 복사 
puts(str3);	//12345 ... ...	=> 문자열의 끝에 널문자가 존재해야하는데, 없어서 문제가 생김 

strncpy(str3, str1, sizeof(str3)-1);	// src(str1)을 dst(src3)에 복사 
str3[sizeof(str3)-1]=0;		// 문자열의 마지막을 null문자로 채움 
puts(str3);	//1234

strcpy, strncpy가 있는 이유
#include <stdio.h>
#include <string.h>
int main(void)
{
	char str1[20]="abc";
	char str2[20];
//	str2 = "abc";			//컴파일 에러 -> 초기화 이후에서의 문자열 저장에서는 strcpy, strncpy 함수를 사용해야한다. 
	strncpy(str2, str1, sizeof(str1));	// strncpy(dest, src, size_t) 에서 dest의 사이즈가 작을경우 마지막에 null문자를 넣어줘야 한다. 
	puts(str1);
	puts(str2);
	return 0;
}

문자열을 덧붙이는 함수들: strcat, strncat
#include <string.h>
char * strcat(char * dest, const char * src);
char * strncat(char * dest, const char * src, size_t n);
// 덧붙여진 문자열의 주소 값 반환

char str1[20] = "First~";
char str2[20] = "Second"; 
char str3[20] = "Simple num: ";
char str4[20] = "1234567890";

strcat(str1, str2);
puts(str1);
strncat(str3, str4, 7); 	//strncpy 함수와 달리 문자열의 끝에 널 문자를 자동으로 삽입해준다. 
puts(str3);	 	// fputs()와 달리 puts()함수는 자동으로 개행을 시켜줌 

문자열을 비교하는 함수들: strcmp, strncmp
#include <string.h>
int strcmp(const char * s1, const char * s2);
int strncmp(const char * s1, const char * s2, size_t n);
// 두 문자열의 내용이 같으면 0, 같지 않으면 0이 아닌 값을 반환

char str1[10] = "ABC";
char str2[10] = "ABB";
char str3[10] = "ABD";
char str4[10] = "ABCA";
char str5[10] = "ABC";
printf("%d\n", strcmp(str1, str2));	// 1	: 사전순서로 str1이 str2보다 뒤에 있음 
printf("%d\n", strcmp(str1, str3));	// -1	: 사전순서로 str1이 str3보다 앞에 있음 
printf("%d\n", strcmp(str1, str4));	// -1	: 사전순서로 str1이 str4보다 앞에 있음
printf("%d\n", strcmp(str1, str5));	// 0	: 두 문자열이 같음 
printf("%d\n", strncmp(str1, str4, 3)); // 0 : 앞에 3글자만 볼 경우 두 문자열이 같음 

그 이외의 변환 함수들
#include <stdlib.h>
int atoi(const char * str);	// 문자열의 내용을 int형으로 반환
long atol(const char * str);	// 문자열의 내용을 long형으로 반환
double atof(const char * str);// 문자열의 내용을 double형으로 반환
--------------------------------------------------------------------------------