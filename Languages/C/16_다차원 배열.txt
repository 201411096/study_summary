------------------------------------------------------------------------------------------
다차원 배열의 이해와 활용

다차원 배열의 sizeof() .. 결과
int arr1[3][4];
int arr2[7][9];
int arr3[3][4][3];
printf("세로3, 가로4: %d\n", sizeof(arr1)); // 48
printf("세로7, 가로9: %d\n", sizeof(arr2)); // 252
printf("arr3의 size: %d\n", sizeof(arr3));  // 144(48*3)

2차원 배열의 메모리상 할당의 형태
int arr[3][2];
int i, j;
for (i = 0; i < 3; i++)
	for (j = 0; j < 2; j++)
		printf("%p \n", &arr[i][j]);
//일정한 간격으로 할당됨(다른 행끼리도 붙어있음, 자바 배열의 동적할당을 생각하면 안됨, 3차원 이상의 배열도 동일함)
//0000001C641FFB88
//0000001C641FFB8C
//0000001C641FFB90
//0000001C641FFB94
//0000001C641FFB98
//0000001C641FFB9C

2차원 배열 선언과 동시에 초기화하기
// 초기화 예시1
int arr1[3][3] = {
	{1,2,3},
	{4,5,6},
	{7,8,9}
};
// 초기화 예시2
int arr2[3][3] = {
	{1,2,3},
	{4,5,6},
	{7} };			// 비어있는 곳은 0으로 채워짐
// 초기화 예시3
int arr3[3][3] = { 1,2,3,4,5,6,7 }; 	// 비어있는 곳은 0으로 채워짐

배열의 크기를 알려주지 않고 초기화하기
//int arr[][] = { 1,2,3,4,5,6,7,8 }; // 에러 발생 (전부 비워두면 에러 발생)
int arr1[][4] = { 1,2,3,4,5,6,7,8 };
int arr2[][2] = { 1,2,3,4,5,6,7,8 };
// int arr1[2][] = { 1,2,3,4,5,6,7,8 }; // 에러 발생 (뒤에서부터 채워줘야함)
------------------------------------------------------------------------------------------
3차원 배열

... (참고 서적에도 별 내용이 없음)