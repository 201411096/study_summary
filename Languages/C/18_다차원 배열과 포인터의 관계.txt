--------------------------------------------------------------------------------
2차원 배열이름의 포인터 형

int arr[10];	// arr은 int형 포인터
void SimpleFunc(int * ptr) { . . . }	//  1차원 배열을 받을 수 있는 함수

int * arr[10];	// 포인터 배열(포인터들이 담겨져 있는 배열)
void SimpleFunc2(int ** ptr) { . . . }	// 포인터 배열을 받을 수 있는 함수

2차원 배열 이름이 가리키는 것들
int arr2d[3][3];
printf("%d \n", arr2d);				// arr2d의 주소값 출력 
printf("%d \n", arr2d[0]);			// arr2d의 주소값과 같은 주소 출력 
printf("%d \n\n", &arr2d[0][0]);	// arr2d의 주소값과 같은 주소 출력 
	
printf("%d \n", arr2d[1]);			// arr2d[1]의 주소값 출력 
printf("%d \n\n", &arr2d[1][0]);	// arr2d[1]의 주소값과 같은 주소 출력 
	
// arr2d와 arr2d[0]은 둘 다 arr2d[3][3]의 첫번쨰 요소를 가리키지만, arr2d는 첫번쨰 요소를 가리키되 배열 전체를 의미하고, arr2d[0]은 첫번째 요소를 가리키되 1행만을 의미한다. 
printf("sizeof(arr2d) : %d", sizeof(arr2d));		// 36(4 * 3 * 3)
printf("sizeof(arr2d[0]) : %d\n", sizeof(arr2d[0])); // 12(4 * 3 * 1)
printf("sizeof(arr2d[1]) : %d\n", sizeof(arr2d[1])); // 12(4 * 3 * 1)

배열이름 기반의 포인터 연산
1차원 배열이름 기반의 포인터 연산
int iarr[3];
double darr[7];
printf("%p %p\n", iarr, iarr+1);	// 000000000062FE10 000000000062FE14 ( iarr의 주소값, iarr의 주소값+4(sizeof(int)) ) 
printf("%p %p\n", darr, darr+1); 	// 000000000062FDD0 000000000062FDD8 ( darr의 주소값, darr의 주소값+8(sizeof(double)) )
2차원 배열이름 기반의 포인터 연산
int arr1[3][2];
int arr2[2][3];
printf("arr1 : %p\n", arr1);		// 000000000062FE00 : arr1 2차원 배열의 주소값 
printf("arr1+1 : %p\n", arr1+1);	// 000000000062FE08 : arr1 2차원 배열의 주소값 + sizeof(int) * 2(가로길이) * 1 
printf("arr1+2 : %p\n\n", arr1+2);	// 000000000062FE10 : arr1 2차원 배열의 주소값 + sizeof(int) * 2(가로길이) * 2
printf("arr2 : %p\n", arr2);		// 000000000062FDE0 : arr2 2차원 배열의 주소값
printf("arr2+1 : %p\n", arr2+1);	// 000000000062FDEC : arr2 2차원 배열의 주소값 + sizeof(int) * 3(가로길이) * 1 
printf("arr2+2 : %p\n\n", arr2+2);	// 000000000062FDF8 : arr2 2차원 배열의 주소값 + sizeof(int) * 3(가로길이) * 2 

2차원 배열이름의 포인터 형
int arr[3][4]의 포인터 형 -> arr은 가리키는 대상이 int형 변수이며, 포인터 연산 시 sizeof(int)*4의 크기단위로 값이 증가 및 감소하는 포인터 형
int arr[3][4]를 가리키는 포인터 변수의 선언 -> int (*ptr) [4]; // int형 변수를 가리키는 포인터이며 포인터 연산 시 4칸씩 건너뛰는 포인터
char (*arr)[4];	->	char형 변수를 가리키면서 포인터 연산 시 sizeof(char)*4의 크기단위로 값이 증가 및 감소하는 포인터 변수
double (*arr)[7];	->	double형 변수를 가리키면서 포인터 연산 시 sizeof(double)*7의 크기단위로 값이 증가 및 감소하는 포인터 변수

2차원 배열의 포인터 형을 결정짓는 연습
int arr1[2][2] = {
	{1, 2}, {3, 4}
};
int arr2[3][2] = {
	{1, 2}, {3, 4}, {5, 6}
};
int arr3[4][2] = {
	{1, 2}, {3, 4}, {5, 6}, {7, 8}
};

int (*ptr)[2]; 

ptr = arr1;	//ptr이 arr1과 동일하게 작동함
for(int i=0; i<2; i++)
	printf("%d %d\n", ptr[i][0], ptr[i][1]);
	
ptr = arr2;	//ptr이 arr2과 동일하게 작동함
for(int i=0; i<3; i++)
	printf("%d %d\n", ptr[i][0], ptr[i][1]);

ptr = arr3;	//ptr이 arr3과 동일하게 작동함
for(int i=0; i<4; i++)
	printf("%d %d\n", ptr[i][0], ptr[i][1]);
--------------------------------------------------------------------------------
2차원 배열이름의 특성과 주의사항

배열 포인터 <-> 포인터 배열
int num1=10, num2=20, num3=30, num4=40;
int arr2d[2][4] = {{1,2,3,4},{5,6,7,8}};
	
int * whoA [4] = {&num1, &num2, &num3, &num4};			// 포인터 배열 (포인터들이 모인 배열) 
int (*whoB) [4] = arr2d;						// 배열 포인터 (배열을 가리키는 포인터) 

printf("%d %d %d %d\n", *whoA[0], *whoA[1], *whoA[2], *whoA[3]);	// 10 20 30 40
for(int i=0; i<2; i++)
{
	for(int j=0; j<4; j++)					// 1  2  3  4
		printf("%d ", whoB[i][j]);				// 5  6  7  8
	printf("\n");
}

2차원배열을 함수의 인자로 전달하기
// 아래 두 문장은 동일한 선언 
// void SimpleFunc(int (*parr1)[7], double (*parr2)[5]){....}
// void SimpleFunc(int parr1[7], double parr2[][5]){....}
int main(void)
{
	int arr1[2][7];
	double arr2[4][5];
	SimpleFunc(arr1, arr2);	 
	return 0;
}

2차원배열을 함수의 인자로 전달하는 사용예시
void ShowArr2DStyle(int (*arr)[4], int row)		// 2차원 배열의 행 개수를 추가적으로 전달함
{
	for(int i=0; i<row; i++)
	{
		for(int j=0; j<4; j++)
			printf("%d ", arr[i][j]);
		printf("\n");
	}
	printf("\n");
}
int Sum2DArr(int arr[][4], int row)			// 2차원 배열의 행 개수를 추가적으로 전달함
{
	int i, j, sum=0;
	for(i=0; i<row; i++)
		for(j=0; j<4; j++)
			sum+=arr[i][j];
	return sum;
}
int main(void)
{
	int arr1[2][4]={1,2,3,4,5,6,7,8};
	int arr2[3][4]={1,1,1,1,3,3,3,3,5,5,5,5};
	
	ShowArr2DStyle(arr1, sizeof(arr1)/sizeof(arr1[0]));
	ShowArr2DStyle(arr2, sizeof(arr2)/sizeof(arr2[0]));
	printf("arr1의 합: %d\n", Sum2DArr(arr1, sizeof(arr1)/sizeof(arr1[0])));	// 36(배열 요소의 합) 
	printf("arr2의 합: %d\n", Sum2DArr(arr2, sizeof(arr2)/sizeof(arr2[0])));	// 36(배열 요소의 합)
		 
	return 0;
}

++ 3차원 배열의 포인터 사용예시
int numArr[2][3][4] = {
    {
        { 11, 22, 33, 44 },
        { 55, 66, 77, 88 },
        { 99, 110, 121, 132 }
    },
    {
        { 111, 122, 133, 144 },
        { 155, 166, 177, 188 },
        { 199, 1110, 1121, 1132 }
    }
};
int (*ptr)[3][4] = numArr;

for(int i=0; i<2; i++)
{
	for(int j=0; j<3; j++)
	{
		for(int k=0; k<4; k++)
		{
			printf("%d ", ptr[i][j][k]);
		}
		printf("\n");
	}
	printf("\n");
}
// int numArr[depth][row][column];
printf("depth of numArr : %d\n", sizeof(numArr)/sizeof(numArr[0]));		// 깊이	: 2 
printf("rows of numArr : %d\n", sizeof(numArr[0])/sizeof(numArr[0][0]));	// 행	: 3 
printf("columns of numArr : %d\n", sizeof(numArr[0][0])/sizeof(int));		// 열	: 4

2차원 배열에서의 arr[i], *(arr+i)
int main(void)
{
	int a[3][2] = {{1, 2}, {3, 4}, {5, 6}};
	
	// arr[i] = *(arr+i) 와 동일 
	printf("a[0]	: %p\n", a[0]);
	printf("*(a+0)	: %p\n", *(a+0));
	
	printf("a[1]	: %p\n", a[1]);
	printf("*(a+1)	: %p\n", *(a+1));
	
	printf("a[2]	: %p\n", a[2]);
	printf("*(a+2)	: %p\n", *(a+2));
	
	printf("a[2][1]: %d\n", a[2][1]		);  // 아래 3문장 전부 동일한 표현 
	printf("a[2][1]: %d\n", (*(a+2))[1]	); 
	printf("a[2][1]: %d\n", *(a[2]+1)	);
	printf("a[2][1]: %d\n", *(*(a+2)+1)	);
	
	return 0;
}
  	 
포인터 변수 선언 예시_01
int * arr1[5];	// int형 포인터 변수로 이뤄진 1차원 배열(포인터 배열)
int * arr2[3][5];	// int*형 포인터 변수로 이뤄진 2차원 배열
int ** ptr1= arr1;		// 예시 부분
int * (*ptr2)[5] = arr2;	// 예시 부분

포인터 변수 선언 예시_02
void SimpleFunc(int * ptr1, int * ptr2, int (*ptr3)[4], int (*ptr4)[4]){ ... }	// 예시 부분
int arr1[3];
int arr2[4];
int arr3[3][4];
int arr4[2][4];
SimpleFunc(arr1, arr2, arr3, arr4)

포인터 변수 선언 예시_03
void SimpleFunc(int ** ptr1, int * (*ptr2)[5], int *** ptr3, int*** (*ptr4)[5]){ ... }	// 예시 부분
int* arr1[3];
int* arr2[3][5];
int** arr3[5];
int** arr4[3][5];
SimpleFunc(arr1, arr2, arr3, arr4)