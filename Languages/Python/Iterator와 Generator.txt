1. Iterator
리스트, Set, Dictionary와 같은 컬렉션이나 문자열과 같은 문자 Sequence 등은 for문을 써서 하나씩 데이터를 처리할 수 있는데, 이렇게 하나하나 처리할 수 있는 컬렉션이나 Sequence들을 Iterable 객체(Iterable Object)라 부른다.

# 리스트 Iterable
for n in [1,2,3,4,5]:
    print(n)

# 문자열 Iterable
for c in "Hello World":
    print(c)

내장 함수 iter()는 "iter(Iterable객체)" 와 같이 사용하여 그 Iterable 객체의 iterator를 리턴한다. Iterable 객체에서 실제 Iteration을 실행하는 것은 iterator로서, iterator는 next 메서드를 사용하여 다음 요소(element)를 가져온다. 만약 더이상 next 요소가 없으면 StopIteration Exception을 발생시킨다.
Iterator의 next 메서드로서 Python 2에서는 "iterator객체.next()" 를 사용하고, Python 3에서는 "iterator객체.__next__()" 메서드를 사용한다. 또한, 버전에 관계없이 사용할 수 있는 방식으로 내장 함수 "next(iterator객체)" 를 사용할 수 있다. 

어떤 클래스를 Iterable 하게 하려면, 그 클래스의 iterator를 리턴하는 __iter__() 메서드를 작성해야 한다.
이 __iter__() 메서드가 리턴하는 iterator는 동일한 클래스 객체가 될 수도 있고, 별도로 작성된 iterator 클래스의 객체가 될 수도 있다.
어떠한 경우든 Iterator가 되는 클래스는 __next()__ 메서드 (Python 2 인 경우 next() 메서드) 를 구현해야 한다.
실제 for 루프에 Iterable Object를 사용하면, 해당 Iterable의 __iter__() 메서드를 호출하여 iterator를 가져온 후 그 iterator의 next() 메서드를 호출하여 루프를 돌게 된다.

2. Generator

Generator는 Iterator의 특수한 한 형태이다.
Generator 함수는 함수 안에 yield를 사용하여 데이터를 하나씩 리턴하는 함수이다.
Generator 함수가 처음 호출되면, 그 함수 실행 중 처음으로 만나는 yield에서 값을 리턴한다. 다시 호출되면, 직전에 실행되었던 yield 문 다음부터 다음 yield문을 만날 때까지의 문장들을 실행하게 된다.
이러한 Generator함수를 변수에 할당하면 해당 변수는 generator 클래스 객체가 된다.

========== example_01 ==========
# Generator Function
def gen():
    yield 1
    yield 2
    yield 3

# Generator Object
g = gen()
print(type(g))  # <class 'generator'>

n = next(g); print(n)  # 1
n = next(g); print(n)  # 2
n = next(g); print(n)  # 3

# 1 2 3
for x in gen():
    print(x)
    
========== example_02 ==========
def pump():
    numbers = [1,2,3,4]
    try:
        for number in numbers:
            yield number
            print('have sent ', number)
    except GeneratorExit:
        print("GeneratorExit")

for num in pump():
    print(num)
    if num == 3:
        break
"""
1
have sent  1
2
have sent  2
3
GeneratorExit
"""
